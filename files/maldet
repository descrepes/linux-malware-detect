#!/usr/bin/env bash
#
##
# Linux Malware Detect v1.6.4
#             (C) 2002-2018, R-fx Networks <proj@rfxn.com>
#             (C) 2018, Ryan MacDonald <ryan@rfxn.com>
# This program may be freely redistributed under the terms of the GNU GPL v2
##
#
PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
ver=1.6.4
inspath='/usr/local/maldetect'
intcnf="$inspath/internals/internals.conf"
if [ -f "/etc/sysconfig/maldet" ]; then
        syscnf=/etc/sysconfig/maldet
elif [ -f "/etc/default/maldet" ]; then
        syscnf=/etc/default/maldet
fi

header() {
	echo "Linux Malware Detect v$ver"
	echo "            (C) 2002-2018, R-fx Networks <proj@rfxn.com>"
	echo "            (C) 2018, Ryan MacDonald <ryan@rfxn.com>"
	echo "This program may be freely redistributed under the terms of the GNU GPL v2"
	echo ""
}

if [ -f "$intcnf" ]; then
	source $intcnf
else
	header
	echo "maldet($$): {glob} \$intcnf not found, aborting."
	exit 1
fi

if [ -f "$cnf" ]; then
	source $cnf
else
	header
	echo "maldet($$): {glob} \$cnf not found, aborting."
	exit 1
fi

if [ -f "$intfunc" ]; then
	source $intfunc
else
	header
	echo "maldet($$): {glob} \$intfunct not found, aborting."
	exit 1
fi

if [ -f "$compatcnf" ]; then
	source $compatcnf
fi

if [ -f "$syscnf" ]; then
	source $syscnf
fi

# prerun operations
prerun

check_operation() {
	if [[ "$operation" == "$1" ]]; then
		echo "You cannot use the flag \"$operation\" twice"
		postrun
	elif [[ -n "$operation" ]]; then
		echo "You cannot use the flags \"$operation\" and \"$1\" simultaneously"
		postrun
	fi
	operation="$1"
}

assign_args() {
	firstarg=
	secondarg=
	if [[ "$1" == "--help" || "$2" == "--help" || "$1" == "-h" || "$2" == "-h" ]]; then
		header
		usage_long | more
		postrun
	fi
	if [[ -n "$1" ]]; then
		firstarg="$1"
	fi
	if [[ -n "$2" ]]; then
		secondarg="$2"
	fi
}

if [ -z "$1" ]; then
	header
	usage_short
else
	while [ -n "$1" ]; do
		case "$1" in
			--mkpubpaths)
				if [ "$scan_user_access" == "1" ]; then
					chmod 711 $userbasedir
					for user in `cat /etc/passwd | cut -d ':' -f1`; do
						uid=`id --user $user`
						if [ -z "$uid" ]; then
							uid=9
						fi
						if [ -z "$scan_user_access_minuid" ]; then
							scan_user_access_minuid=10
						fi
						if [ "$uid" -ge "$scan_user_access_minuid" ] && [ ! -d "$userbasedir/$user" ]; then
							mkdir -p $userbasedir/$user/quar $userbasedir/$user/sess $userbasedir/$user/tmp
							touch $userbasedir/$user/event_log
							chown -R $user $userbasedir/$user
							chmod 750 $userbasedir/$user $userbasedir/$user/quar $userbasedir/$user/sess $userbasedir/$user/tmp
							chmod 640 $userbasedir/$user/event_log
							eout "{glob} created public scanning paths for user $user"
						fi
						unset uid user
					done
					exit
				else
					header
					echo "public scanning support not enabled in $cnf, aborting."
					exit
				fi
			;;
			-hscan|--hook-scan|--modsec)
				hscan=1
			;;
			-U|--user)
				shift
				user="$1"
				quardir=$userbasedir/$user/quar
				sessdir=$userbasedir/$user/sess
				tmpdir=$userbasedir/$user/tmp
				maldet_log=$userbasedir/$user/event_log
			;;
			-co|--config-option)
				shift
				user=`whoami`
				if [ ! "$user" == "root" ]; then
					tmpdir=$userbasedir/$user/tmp
				fi
				tmpco=$tmpdir/config.cli
				rm -f $tmpco
				touch $tmpco
				echo ,$1 | sed -e 's/-\(-config-option\|co\) //' -e 's/\(, *[a-zA-Z0-9_][a-zA-Z0-9_]*=\)/\n\1\n/g' | sed -e '1d' -e 's/^\([^,].*\|.*[^=]\)$/"\1"/' | sed -e '$!N;s/\n//' -e 's/^, *//' | grep -v "^ *compatcnf" > $tmpco
				. $tmpco
				rm -f $tmpco
				if [ -f "$compatcnf" ]; then
					source $compatcnf
				fi
			;;
			-qd)
				shift
				if [ -d "$1" ];  then
					eout "{scan} set quarantine path: $1" 1
					quardir="$1"
				fi
			;;
			-b|--background)
				set_background=1
			;;
			-x|--exclude-regex)
				shift
				if [ "$1" ]; then
					exclude_regex="-not -regex \"$1\""
				fi
			;;
			-i|--include-regex)
				shift
				if [ "$1" ]; then
					include_regex="-regex \"$1\""
				fi
			;;
			--wget-proxy|--curl-proxy|--web-proxy)
				shift
				if [ "$1" ]; then
					web_proxy="$1"
				fi
			;;
			--alert-daily|--monitor-report|-k|--kill-monitor|-kill|-l|--log|-p|--purge)
				check_operation "$1"
			;;
			-m|--monitor|-c|--checkout|-f|--file-list|-a|--scan-all|-s|--restore|-q|--quarantine|-n|--clean)
				check_operation "$1"
				shift
				assign_args "$1"
			;;
			-r|--scan-recent|-e|--report)
				check_operation "$1"
				shift
				assign_args "$1" "$2"
				shift
			;;
			-d|--update-ver|--update-version)
				check_operation "$1"
				if [[ "$2" == "1" || "$2" == "--force" || "$2" == "--beta" ]]; then
					shift
					assign_args "$1"
				fi
			;;
			-u|--update|--update-sigs)
				process_update=1
				if [[ "$2" == "1" || "$2" == "--force" ]]; then
					shift
					updatearg="$2"
				fi
			;;
			-h|--help)
				header
				usage_long | more
				postrun
			;;
			*)
				unknown_arg=1
		esac
		shift
	done

	# Update if requested
	if [[ -n "$process_update" && -z "$unknown_arg" ]]; then
		shift
		if [ ! "$updatearg" == "1" ]; then
			already_header=1
			header
		fi
		if [ "$updatearg" == "--force" ]; then
			sigup_force=1
		fi
		sigup
	fi

	# Perform the operation requested
	if [[ "$operation" == "--alert-daily" || "$operation" == "--monitor-report" ]]; then
		genalert digest
	elif [[ "$operation" == "-f" || "$operation" == "--file-list" ]]; then
		if [[ -z "$hscan" && -z "$already_header" ]]; then
			header
		fi
		svc=f
		trap trap_exit 2
		file_list="$firstarg"
		if [ ! -f "$file_list" ]; then
			eout "{scan} file does not exist ($firstarg)" 1
			exit 1
		elif [ ! -s "$file_list" ]; then
			eout "{scan} file list is empty ($firstarg)" 1
			exit 1
		fi
		if [ "$set_background" == "1" ]; then
			eout "{scan} launching scan of $spath to background, see $maldet_log for progress" 1
			scan "$spath" "$file_list" >> /dev/null 2>&1 &
		else
			scan "$spath" "$file_list"
		fi
	elif [[ "$operation" == "-a" || "$operation" == "--scan-all" ]]; then
		if [[ -z "$hscan" && -z "$already_header" ]]; then
			header
		fi
		svc=a
		trap trap_exit 2
		spath="$firstarg"
		hrspath="$firstarg"
		if [ "$spath" == "" ]; then
			spath=/home
		fi
		if [ "$set_background" == "1" ]; then
			eout "{scan} launching scan of $spath to background, see $maldet_log for progress" 1
			scan "$spath" all >> /dev/null 2>&1 &
		else
			scan "$spath" all
		fi
	elif [[ "$operation" == "-d" || "$operation" == "--update-ver" || "$operation" == "--update-version" ]]; then
		if [[ "$firstarg" != "1" && -z "$already_header" ]]; then
			header
		fi
		if [ "$firstarg" == "--force" ]; then
			lmdup_force=1
		elif [ "$firstarg" == "--beta" ]; then
			lmdup_beta=1
		fi
		lmdup
	else
		if [[ -z "$already_header" ]]; then
			header
		fi
		if [[ -n "$unknown_arg" || ( -z "$operation" && -n "$process_update" ) ]]; then
			usage_short
		elif [[ "$operation" == "-c" || "$operation" == "--checkout" ]]; then
			checkout "$firstarg"
		elif [[ "$operation" == "-m" || "$operation" == "--monitor" ]]; then
			if [ "$OSTYPE" == "FreeBSD" ]; then
				eout "{mon} not currently supported under FreeBSD" 1
			elif [ "$firstarg" == "reload" ] || [ "$firstarg" == "RELOAD" ]; then
				eout "{mon} queued monitor for configuration reload" 1
				touch $inspath/reload_monitor
			else
				svc=m
				trap trap_exit 2
				monitor_init "$firstarg"
			fi
		elif [[ "$operation" == "-k" || "$operation" == "--kill-monitor" || "$operation" == "-kill" ]]; then
			if [ "$OSTYPE" == "FreeBSD" ]; then
				eout "{mon} not currently supported under FreeBSD" 1
			else
				monitorpid=`pgrep -f inotify.paths.[0-9]+`
				if [ -z "$monitorpid" ]; then
					eout "{mon} could not find running inotifywait process, are we already dead?" 1
				else
					eout "{mon} sent kill to monitor service (pid: $monitorpid)" 1
					monitor_kill
				fi
			fi
		elif [[ "$operation" == "-r" || "$operation" == "--scan-recent" ]]; then
			svc=r
			trap trap_exit 2
			spath="$firstarg"
			days="$secondarg"
			if [ -z "$spath" ]; then
				eout "{scan} no path defined" 1
				exit
			fi
			if [ -z "$days" ]; then
				days=7
			fi
			if [ "$set_background" == "1" ]; then
				eout "{scan} launching scan of $spath changes in last ${days}d to background, see $maldet_log for progress" 1
				scan "$spath" "$days" >> /dev/null 2>&1 &
			else
				scan "$spath" "$days"
			fi
		elif [[ "$operation" == "-l" || "$operation" == "--log" ]]; then
			view
		elif [[ "$operation" == "-e" || "$operation" == "--report" ]]; then
			view_report "$firstarg" "$secondarg"
		elif [[ "$operation" == "-p" || "$operation" == "--purge" ]]; then
			purge
		elif [[ "$operation" == "-s" || "$operation" == "--restore" ]]; then
			if [ -f "$sessdir/session.hits.$firstarg" ]; then
				restore_hitlist "$firstarg"
			else
				restore "$firstarg"
			fi
		elif [[ "$operation" == "-q" || "$operation" == "--quarantine" ]]; then
			quar_hitlist "$firstarg"
		elif [[ "$operation" == "-n" || "$operation" == "--clean" ]]; then
			clean_hitlist "$firstarg"
		fi
	fi
fi

# import any remote configuration data
import_conf

# postrun operations
postrun
